generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =============================================================
// ENUMS
// =============================================================

enum Role {
  USER
  ADMIN
  OWNER
}

// =============================================================
// MODELS
// =============================================================

model User {
  id            String    @id @default(cuid())           // ðŸ†• ensure auto id generation
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sessions      Session[]
  accounts      Account[]

  // Access control
  role          Role      @default(USER)
  invites       Invite[]  @relation("InvitedBy")        // ðŸ†• optional reverse relation

  @@map("user")
}

// -------------------------------------------------------------
// Active sessions
// -------------------------------------------------------------
model Session {
  id         String   @id @default(cuid())               // ðŸ†• ensure cuid()
  expiresAt  DateTime
  token      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ipAddress  String?
  userAgent  String?
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

// -------------------------------------------------------------
// OAuth / Local account connections
// -------------------------------------------------------------
model Account {
  id                    String   @id @default(cuid())    // ðŸ†• cuid() for unique ID
  accountId             String
  providerId            String
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

// -------------------------------------------------------------
// Email verification / password reset tracking
// -------------------------------------------------------------
model VerificationToken {                             // ðŸ§¹ renamed for consistency
  id          String   @id @default(cuid())
  identifier  String
  value       String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([identifier, value])                       // ðŸ†• prevent duplicate tokens
  @@map("verification_token")
}

// -------------------------------------------------------------
// Invite-only onboarding
// -------------------------------------------------------------
model Invite {
  id         String   @id @default(cuid())
  email      String   @unique
  role       Role     @default(USER)
  inviteCode String   @unique
  expiresAt  DateTime
  accepted   Boolean  @default(false)
  createdAt  DateTime @default(now())

  invitedBy  User?    @relation("InvitedBy", fields: [invitedById], references: [id]) // ðŸ†• optional
  invitedById String?

  @@map("invite")
}

// =============================================================
// CMS MODELS
// =============================================================

// ðŸ†• Manage hackathon team members
model TeamMember {
  id        String   @id @default(cuid())
  name      String
  role      String
  imageUrl  String?
  bio       String?
  order     Int?     // optional ordering
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ðŸ†• Manage hackathon event schedule
model Schedule {
  id        String   @id @default(cuid())
  title     String
  startTime DateTime
  endTime   DateTime?
  location  String?
  day       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ðŸ†• Generic key-value CMS content (for hero text, footer text, etc.)
model Content {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
